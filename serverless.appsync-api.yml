# (4.1)
name: appsyncmasterclass
schema: schema.api.graphql # name of the graphql schema file [4.2]
# (4.3.2) after configuring the Cognito User Pool, we need to configure the AppSync API to use it.
authenticationType: AMAZON_COGNITO_USER_POOLS

userPoolConfig:
  awsRegion: eu-west-1 # make sure this matches provider/region value in serverless.yml file
  defaultAction: ALLOW
  userPoolId: !Ref CognitoUserPool

# (4.8.1) tell the serverless AppSync plugin where the Appsync templates are going to be, and how to map them to the graphQL query
mappingTemplatesLocation: mapping-templates

mappingTemplates:
  # [4.8] Implement getMyProfile query. We need to setup an AppSync resolver and have it get an item from DDB.
  - type: Query
    field: getMyProfile
    dataSource: usersTable # we define dataSources below for this
    # (4.8.2) Per convention, add two files at the folder `./mapping-templates`, `Query.getMyProfile.request.vtl`, `Query.getMyProfile.response.vtl`
    # Realize how it matches `mappingTemplates:type&field`
    # The convention Handles request:<fileName> and response:<fileName> that would be right here otherwise

  # [4.11] Implement editMyProfile query. We need to setup an AppSync resolver and have it edit an item at DDB.
  # (4.11.0) add an entry to the mappingTemplates
  - type: Mutation
    field: editMyProfile
    dataSource: usersTable

  # [4.13] Implement getImageUploadUrl query (use a lambda to implement it)
  # (4.13.0) add an entry to the mappingTemplates
  - type: Query
    field: getImageUploadUrl
    dataSource: getImageUploadUrlFunction # we define dataSources below for this
    # For lambda functions, Appsync has a direct resolver integration, so we do not need a custom request & response vtl template.
    # this is how we configure it, and serverless-appsync-plugin takes care of it
    request: false
    response: false

  # (4.15.2) Create a lambda resolver to generate a tweet `ulid`, write to `TweetsTable`, `TimelinesTable` and update `UsersTable`.
  # (4.15.2.0) Add the  mapping template
  - type: Mutation
    field: tweet
    dataSource: tweetFunction
    # same as (4.13.0)
    request: false
    response: false

dataSources:
  - type: NONE
    name: none
  - type: AMAZON_DYNAMODB # (4.8.1, 4.11.0)
    name: usersTable
    config:
      tableName: !Ref UsersTable
  - type: AWS_LAMBDA # (4.13.0)
    name: getImageUploadUrlFunction
    config:
      functionName: getImageUploadUrl
  - type: AWS_LAMBDA # (4.15.2.0)
    name: tweetFunction
    config:
      functionName: tweet
