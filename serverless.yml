app: backend
service: backend
frameworkVersion: '2'

# [1] exclude `package.json` files from being bundled.
plugins:
  - serverless-appsync-plugin
  - serverless-iam-roles-per-function
  - serverless-export-env # (6) integration test
  - serverless-manifest-plugin # [10] get API_URL from CognitoUserPoolArn

provider:
  name: aws
  runtime: nodejs12.x
  region: eu-west-1
  # any env var defined here applies to all the functions
  environment:
    # (4.2) when using aws nodeJs SDK, always enable HTTP keep-alive
    STAGE: ${self:custom.stage} # stage: dev # if not specified, defaults to dev
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'

package:
  exclude:
    - package-lock.json
    - package.json

custom:
  # (6) add AWS_REGION as an env var (use region from CLI command override, otherwise provider:region:)
  region: ${opt:region, self:provider.region}
  # (4.0) Environment is dev, unless we pass in a stage override; npm run sls -- -s prod
  stage: ${opt:stage, self:provider.stage}
  # [1] Create a separate `serverless.appsync-api.yml` file for AppSync configuration.
  appSync: ${file(serverless.appsync-api.yml)}
  # (10) get API_URL from CognitoUserPoolArn
  manifest:
    postProcess: ./processManifest.js
    disablePostDeployGeneration: true
    disableOutput: true
    silent: true

# (4.1) Add a functions block for the lambda trigger function
functions:
  confirmUserSignup:
    handler: functions/confirm-user-signup.handler
    # the function needs to know the name of the UsersTable, which is generated by CloudFormation
    # this one is a function level env var, they aggregate over provider: environment:
    environment:
      USERS_TABLE: !Ref UsersTable
    # the function needs the permission to write to the UsersTable
    # note: we don't want a global iamRoleStatements: under provider: , we just want permission for this function
    # (4.2) we use npm i -D serverless-iam-roles-per-function to do this
    # auto generated role name for function too long
    iamRoleStatementsName: ${self:service}-${self:custom.stage}-confirmUserSignup
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:PutItem # in DDB, Put means rest POST, and Update means rest PUT
        Resource: !GetAtt UsersTable.Arn

  # (15.1) add the lambda function that will do the work (getImageUploadUrl)
  getImageUploadUrl:
    handler: functions/get-upload-url.handler
    # (15.2) create the S3 bucket env var, to help make the s3 putObject request
    environment:
      BUCKET_NAME: !Ref AssetsBucket
    iamRoleStatementsName: ${self:service}-${self:custom.stage}-getImageUploadUrl
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject # the lambda needs the S3 putObject permission
          - s3:PutObjectAcl # it also needs ACL permission because we set it in the params (get-upload-url.js/s3.getSignedUrl('putObject', params))
        Resource: !Sub ${AssetsBucket.Arn}/* # allow the function to interact with any object in the bucket

  # (17.2.1) add the yml for the lambda function that will generate a tweet `ulid` for the 3 DDB tables,
  # write to Tweets and Timelines tables, and update Users table.
  tweet:
    handler: functions/tweet.handler
    environment: # we need to transact with 3 DDB tables
      USERS_TABLE: !Ref UsersTable
      TWEETS_TABLE: !Ref TweetsTable
      TIMELINES_TABLE: !Ref TimelinesTable
    iamRoleStatements:
      # in DDB, Put means rest POST, and Update means rest PUT
      - Effect: Allow # we need to update the tweet count at UsersTable
        Action: dynamodb:UpdateItem #
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow # we need to write to TweetsTable and TimelinesTable
        Action: dynamodb:PutItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelinesTable.Arn

  # (35.1) add a new function for retweet
  # We need to add an entry to the `TweetsTable` for the retweet, which means we need a tweetId, which is a `ulid`
  # ulid requires us to use a lambda resolver. Similar to (17.2).
  # Get from Tweets, Update Tweets and Users, write to Tweets, Timelines, Retweets,
  retweet:
    handler: functions/retweet.handler
    environment:
      USERS_TABLE: !Ref UsersTable
      TWEETS_TABLE: !Ref TweetsTable
      TIMELINES_TABLE: !Ref TimelinesTable
      RETWEETS_TABLE: !Ref RetweetsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt UsersTable.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelinesTable.Arn
          - !GetAtt RetweetsTable.Arn

  # (39.2) add a new function for unretweet, almost the same as retweet at (35.1)
  unretweet:
    handler: functions/unretweet.handler
    environment:
      USERS_TABLE: !Ref UsersTable
      TWEETS_TABLE: !Ref TweetsTable
      TIMELINES_TABLE: !Ref TimelinesTable
      RETWEETS_TABLE: !Ref RetweetsTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn
      # we have to query DDB for the retweet so that we can delete it
      # we use CloudFormation's !Sub to interpolate the ARN of the table
      - Effect: Allow
        Action: dynamodb:Query
        Resource: !Sub '${TweetsTable.Arn}/index/retweetsByCreator'
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt UsersTable.Arn
      - Effect: Allow
        Action: dynamodb:DeleteItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelinesTable.Arn
          - !GetAtt RetweetsTable.Arn

  # (44.2) Add the lambda for reply
  # Get from Tweets, Update Tweets and Users, write to Tweets, Timelines
  # Similar to (35.1) retweets without the retweet table
  reply:
    handler: functions/reply.handler
    environment:
      USERS_TABLE: !Ref UsersTable
      TWEETS_TABLE: !Ref TweetsTable
      TIMELINES_TABLE: !Ref TimelinesTable
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:GetItem
        Resource: !GetAtt TweetsTable.Arn
      - Effect: Allow
        Action: dynamodb:UpdateItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt UsersTable.Arn
      - Effect: Allow
        Action: dynamodb:PutItem
        Resource:
          - !GetAtt TweetsTable.Arn
          - !GetAtt TimelinesTable.Arn

  # [51] Distribute tweets to followers
  # (51.1) add a new function for distributeTweets
  distributeTweets:
    handler: functions/distribute-tweets.handler
    environment:
      RELATIONSHIPS_TABLE: !Ref RelationshipsTable
      TIMELINES_TABLE: !Ref TimelinesTable
    events: # lambda triggered by a stream event
      - stream:
          type: dynamodb
          arn: !GetAtt TweetsTable.StreamArn
    iamRoleStatementsName: ${self:service}-${self:custom.stage}-distributeTweets
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - dynamodb:BatchWriteItem
        Resource: !GetAtt TimelinesTable.Arn
      - Effect: Allow
        Action: dynamodb:Query
        Resource: !Sub '${RelationshipsTable.Arn}/index/byOtherUser'

  # [54]Implement add tweets to timeline when following someone
  # (54.0)  add the lambda and enable streams on the table it's streaming from.
  distributeTweetsToFollower:
    handler: functions/distribute-tweets-to-follower.handler
    environment:
      TWEETS_TABLE: !Ref TweetsTable
      TIMELINES_TABLE: !Ref TimelinesTable
      MAX_TWEETS: '100'
    events: # lambda triggered by a stream event
      - stream:
          type: dynamodb
          arn: !GetAtt RelationshipsTable.StreamArn
    # (56) workaround to 64 character limit
    # auto generated role name for function too long
    iamRoleStatementsName: ${self:service}-${self:custom.stage}-distributeTweetsToFollower
    iamRoleStatements:
      - Effect: Allow
        Action: dynamodb:Query
        Resource:
          - !Sub '${TweetsTable.Arn}/index/byCreator'
          - !Sub '${TimelinesTable.Arn}/index/byDistributedFrom'
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: !GetAtt TimelinesTable.Arn

resources:
  Resources:
    # [4] Save user profile on PostConfirmation
    # (4.0) Create a DynamoDB table to store user profiles
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
