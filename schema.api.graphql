# every GraphQL function starts with query and mutation
schema {
  query: Query
  mutation: Mutation
  # [73] Add subscriptions to GraphQL schema
  # We do not want clients to poll AppSync for notifications.
  # Instead we want the backend to push data to the clients when there is data to be sent.
  # We implement this with GraphQL subscriptions which allow clients to subscribe to data change events.
  subscription: Subscription
}

# [2] identify and implement the Queries and Mutations of your system
# variable! means a non-nullable value
# ID, AWSUrl, AWSDate, AWSDateTime are GraphQL built-in types

type Query {
  getImageUploadUrl(extension: String, contentType: String): AWSURL!
  # After we fetch the tweetId for the tweets on our timeline, we have to hydrate them from the Tweets table
  # (23.2) Add a type `UnhydratedTweetsPage` and make `getMyTimeline` return a `UnhydratedTweetsPage` instead of `TweetsPage`
  getMyTimeline(limit: Int!, nextToken: String): UnhydratedTweetsPage!
  getMyProfile: MyProfile!
  getProfile(screenName: String!): OtherProfile
  getTweets(userId: ID!, limit: Int!, nextToken: String): TweetsPage!
  # (32.0) `getLikes` is very similar to `getMyTimeline` (23)
  # To get the tweets that a user likes, we just need to query the `LikesTable` against the user's `userId`.
  # We have the same challenge we had in (23) with `getMyTimeline`; we don't have everything about the tweet itself and we need to hydrate it afterward.
  getLikes(userId: ID!, limit: Int!, nextToken: String): UnhydratedTweetsPage!
  getFollowers(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!
  getFollowing(userId: ID!, limit: Int!, nextToken: String): ProfilesPage!
  # [66] Add Search query to GraphQL schema
  search(
    query: String!
    mode: SearchMode!
    limit: Int!
    nextToken: String
  ): SearchResultsPage!
  # [69] Add getHashTag query to GraphQL schema
  getHashTag(
    hashTag: String!
    mode: HashTagMode!
    limit: Int!
    nextToken: String
  ): HashTagResultsPage!
}

type Mutation {
  editMyProfile(newProfile: ProfileInput!): MyProfile!
  tweet(text: String!): Tweet!
  like(tweetId: ID!): Boolean!
  unlike(tweetId: ID!): Boolean!
  retweet(tweetId: ID!): Retweet!
  unretweet(tweetId: ID!): Boolean!
  reply(tweetId: ID!, text: String!): Reply!
  follow(userId: ID!): Boolean!
  unfollow(userId: ID!): Boolean!
  # (73.1) add the mutations for the subscription type
  notifyRetweeted(
    id: ID!
    userId: ID!
    tweetId: ID!
    retweetedBy: ID!
    retweetId: ID!
  ): Notification! @aws_iam

  notifyLiked(id: ID!, userId: ID!, tweetId: ID!, likedBy: ID!): Notification!
    @aws_iam

  notifyMentioned(
    id: ID!
    userId: ID!
    mentionedBy: ID!
    mentionedByTweetId: ID!
  ): Notification! @aws_iam

  notifyReplied(
    id: ID!
    userId: ID!
    tweetId: ID!
    replyTweetId: ID!
    repliedBy: ID!
  ): Notification! @aws_iam
}
# (73.0) Define a top level subscription type
type Subscription {
  onNotified(userId: ID!, type: NotificationType): Notification
    @aws_subscribe(
      mutations: [
        "notifyRetweeted"
        "notifyLiked"
        "notifyMentioned"
        "notifyReplied"
      ]
    )
}

# (66) Add Search query to GraphQL schema
enum SearchMode {
  Top
  Latest
  People
  Photos
  Videos
}

# Add getHashTag query to GraphQL schema
enum HashTagMode {
  Top
  Latest
  People
  Photos
  Videos
}

input ProfileInput {
  name: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthdate: AWSDate
}

# [2] use interface to solidify the common properties between types (MyProfile vs OtherProfile)
interface IProfile {
  id: ID!
  name: String!
  screenName: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  tweets: TweetsPage!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCounts: Int!
}

type MyProfile implements IProfile {
  id: ID!
  name: String!
  screenName: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  tweets: TweetsPage!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCounts: Int!
}

type OtherProfile implements IProfile {
  id: ID!
  name: String!
  screenName: String!
  imageUrl: AWSURL
  backgroundImageUrl: AWSURL
  bio: String
  location: String
  website: AWSURL
  birthdate: AWSDate
  createdAt: AWSDateTime!
  tweets: TweetsPage!
  followersCount: Int!
  followingCount: Int!
  tweetsCount: Int!
  likesCounts: Int!
  following: Boolean!
  followedBy: Boolean!
}

interface ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
}

type Tweet implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  text: String!
  replies: Int!
  likes: Int!
  retweets: Int!
  liked: Boolean!
  retweeted: Boolean!
}

type Reply implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  inReplyToTweet: ITweet!
  inReplyToUsers: [IProfile!]
  text: String!
  replies: Int!
  likes: Int!
  retweets: Int!
  liked: Boolean!
  retweeted: Boolean!
}

type Retweet implements ITweet {
  id: ID!
  profile: IProfile!
  createdAt: AWSDateTime!
  retweetOf: ITweet!
}

type TweetsPage {
  tweets: [ITweet!]
  nextToken: String
}

# (23.2) Add a type `UnhydratedTweetsPage` and make `getMyTimeline` return a `UnhydratedTweetsPage` instead of `TweetsPage`
type UnhydratedTweetsPage {
  tweets: [ITweet!]
  nextToken: String
}

type ProfilesPage {
  profiles: [IProfile!]
  nextToken: String
}

# (66) Add Search query to GraphQL schema
union SearchResult = MyProfile | OtherProfile | Tweet | Reply
type SearchResultsPage {
  results: [SearchResult!]
  nextToken: String
}

# (69) Add getHashTag query to GraphQL schema
union HashTagResult = MyProfile | OtherProfile | Tweet | Reply
type HashTagResultsPage {
  results: [HashTagResult!]
  nextToken: String
}

# (73.2)
type Retweeted implements iNotification @aws_iam @aws_cognito_user_pools {
  id: ID!
  type: NotificationType!
  userId: ID!
  tweetId: ID!
  retweetedBy: ID!
  retweetId: ID!
  createdAt: AWSDateTime!
}

type Liked implements iNotification @aws_iam @aws_cognito_user_pools {
  id: ID!
  type: NotificationType!
  userId: ID!
  tweetId: ID!
  likedBy: ID!
  createdAt: AWSDateTime!
}

type Mentioned implements iNotification @aws_iam @aws_cognito_user_pools {
  id: ID!
  type: NotificationType!
  userId: ID!
  mentionedBy: ID!
  mentionedByTweetId: ID!
  createdAt: AWSDateTime!
}

type Replied implements iNotification @aws_iam @aws_cognito_user_pools {
  id: ID!
  type: NotificationType!
  userId: ID!
  tweetId: ID!
  replyTweetId: ID!
  repliedBy: ID!
  createdAt: AWSDateTime!
}

union Notification @aws_iam @aws_cognito_user_pools =
    Retweeted
  | Liked
  | Mentioned
  | Replied

interface iNotification @aws_iam @aws_cognito_user_pools {
  id: ID!
  type: NotificationType!
  userId: ID!
  createdAt: AWSDateTime!
}

enum NotificationType {
  Retweeted
  Liked
  Mentioned
  Replied
}
