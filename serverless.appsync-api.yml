# (1)
name: appsyncmasterclass
schema: schema.api.graphql # name of the graphql schema file [2]
# (3.2) after configuring the Cognito User Pool, we need to configure the AppSync API to use it.
authenticationType: AMAZON_COGNITO_USER_POOLS

userPoolConfig:
  awsRegion: eu-west-1 # make sure this matches provider/region value in serverless.yml file
  defaultAction: ALLOW
  userPoolId: !Ref CognitoUserPool

# (8.1) tell the serverless AppSync plugin where the Appsync templates are going to be, and how to map them to the graphQL query
mappingTemplatesLocation: mapping-templates

mappingTemplates:
  # Yan recommends to organize the mapping templates by Query, Mutation and Nested resolvers.
  ## QUERIES

  # [8] Implement getMyProfile query. We need to setup an AppSync resolver and have it get an item from DDB.
  - type: Query
    field: getMyProfile
    dataSource: usersTable # we define dataSources below for this
    # (8.2) Per convention, add two files at the folder `./mapping-templates`, `Query.getMyProfile.request.vtl`, `Query.getMyProfile.response.vtl`
    # Realize how it matches `mappingTemplates:type&field`
    # The convention Handles request:<fileName> and response:<fileName> that would be right here otherwise

  # [20] Implement getTweets query
  # (20.0) Add the mapping template
  - type: Query
    field: getTweets
    dataSource: tweetsTable

  # [23] Implement getMyTimeline query
  # (23.0) Add the mapping template to the yml
  - type: Query
    field: getMyTimeline
    dataSource: timelinesTable

  # [15] Implement getImageUploadUrl query (use a lambda to implement it)
  # (15.0) add an entry to the mappingTemplates
  - type: Query
    field: getImageUploadUrl
    dataSource: getImageUploadUrlFunction # we define dataSources below for this
    # For lambda functions, Appsync has a direct resolver integration, so we do not need a custom request & response vtl template.
    # this is how we configure it, and serverless-appsync-plugin takes care of it
    request: false
    response: false

  ## MUTATIONS

  # [12] Implement editMyProfile mutation. We need to setup an AppSync resolver and have it edit an item at DDB.
  # (12.0) add an entry to the mappingTemplates
  - type: Mutation
    field: editMyProfile
    dataSource: usersTable

  # (17.2) Create a lambda resolver to generate a tweet `ulid`, write to `TweetsTable`, `TimelinesTable` and update `UsersTable`.
  # (17.2.0) Add the  mapping template to the yml
  - type: Mutation
    field: tweet
    dataSource: tweetFunction
    # same as (15.0)
    request: false
    response: false

  # (26.1) setup an AppSync resolver to update 3 tables when like happens: UsersTable, TweetsTable, LikesTable.
  - type: Mutation
    field: like
    dataSource: likeMutation

  ## NESTED RESOLVERS
  # (18.2) Take the `creator` id in the Tweet from DDB, and ask AppSync to read the user information from `UsersTable`,
  # so that we can populate the user profile in the Tweet type of our schema. We do that by using nested resolvers.
  - type: Tweet
    field: profile
    dataSource: usersTable

  # [27] Implement the Tweet.liked nested resolver
  # (27.0) create a nested resolver for liked
  - type: Tweet
    field: liked
    dataSource: likesTable

  # (23.3) Now we have a type `TimelinePage`, and a `tweets` field we can attach a nested resolver to.
  # We can have that resolver hydrate the data from a different table.
  # Create a nested field that uses the `tweets` field of the type `TimelinePage`, to be used to get data from `tweetsTable`
  - type: TimelinePage
    field: tweets
    dataSource: tweetsTable

dataSources:
  - type: NONE
    name: none

  ## DDB data sources

  - type: AMAZON_DYNAMODB
    name: usersTable # (8.1, 12.0) define a data source for the query and mutation
    config:
      tableName: !Ref UsersTable

  - type: AMAZON_DYNAMODB
    name: tweetsTable # (20.0) define a data source for the query
    config:
      tableName: !Ref TweetsTable

  - type: AMAZON_DYNAMODB
    name: timelinesTable # (23.0) define a data source for the query
    config:
      tableName: !Ref TimelinesTable

  # (26.1) define a data source for the mutation, this one needs to be a chained data source
  # because we need likeMutation to have permissions to modify the 3 tables
  - type: AMAZON_DYNAMODB
    name: likesTable
    config:
      tableName: !Ref LikesTable
  # (26.1) we need the like mutation to create an entry in the LikesTable, then update UsersTable and TweetsTable
  # When we need to do multiple transactions in an AppSync resolver, we need to create a dataSource for the mutation
  - type: AMAZON_DYNAMODB
    name: likeMutation
    config:
      tableName: !Ref LikesTable
      iamRoleStatements: # this is like (17.2.1) using lambda resolver to transact with 3 tables
        - Effect: Allow
          Action: dynamodb:PutItem
          Resource: !GetAtt LikesTable.Arn
        - Effect: Allow
          Action: dynamodb:UpdateItem
          Resource:
            - !GetAtt UsersTable.Arn
            - !GetAtt TweetsTable.Arn

  ## LAMBDA data sources

  - type: AWS_LAMBDA
    name: getImageUploadUrlFunction # (15.0) define a data source for the query
    config:
      functionName: getImageUploadUrl

  - type: AWS_LAMBDA
    name: tweetFunction # (17.2.0) define a data source for the mutation
    config:
      functionName: tweet

# (23.4) For the nested field to work we need another set of `vtl` files under `mapping-templates/`.
# * We will have access to a list of tweets from Timelines table, which has userId and tweetId.
# * We can use the tweetId to fetch the tweets from the Tweets table.
# * We are going the take the source tweets array from the `TimelinePage`, which are the items that we would fetch from Timelines table `tweets: [ITweet!]`,
##  extract the tweet id into an array of tweets with just the id, Json serialize it, pass it to the BatchGetItem operation.
substitutions:
  # (23.5) We need the value of the TweetsTable we are going to BatchGetItem from.
  # To get this value we add a block to the `serverless.appsync-api.yml`
  TweetsTable: !Ref TweetsTable
  # (26.1) when we want to use refer to the resources in a vtl file with ${resourceName}, we need to add it to the substitutions
  LikesTable: !Ref LikesTable
  UsersTable: !Ref UsersTable
